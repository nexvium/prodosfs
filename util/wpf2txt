#!/usr/bin/perl
#
# MultiScribe to Text translator.
#
use strict;
use warnings;
use Getopt::Long;

$0 = (split m#/#, $0)[-1];
$| = 1;

my $MAX_FILE_SIZE = (1 << 24) - 1;
my %COLOR = (
    bold_on      => "\e[1m",        bold_off      => "\e[22m",
    faint_on     => "\e[2m",        faint_off     => "\e[22m",
    italic_on    => "\e[3m",        italic_off    => "\e[23m",
    under_on     => "\e[4m",        under_off     => "\e[24m",
    blink_on     => "\e[5m",        blink_off     => "\e[25m",
    blink2_on    => "\e[6m",        blink2_off    => "\e[26m",
    inverse_on   => "\e[7m",        inverse_off   => "\e[27m",
    invisible_on => "\e[8m",        invisible_off => "\e[28m",
    strikeout_on => "\e[9m",        strikeout_off => "\e[29m",
    color_on     => "\e[1;36m",     color_off     => "\e[22;39m",
);
my %PLAIN = (
    bold_on      => "",             bold_off      => "",
    faint_on     => "",             faint_off     => "",
    italic_on    => "",             italic_off    => "",
    under_on     => "",             under_off     => "",
    blink_on     => "",             blink_off     => "",
    blink2_on    => "",             blink2_off    => "",
    inverse_on   => "",             inverse_off   => "",
    invisible_on => "",             invisible_off => "",
    strikeout_on => "",             strikeout_off => "",
    color_on     => "",             color_off     => "",
);
my %C = %COLOR;
my $WIDTH = $ENV{COLUMNS} || 120;
my %OPT = ();

GetOptions(\%OPT, "help|h", "plain!", "debug|d") or exit(1);
if ($OPT{help}) {
    print <<USAGE ;
usage:  $0 [opts] <file>

options:

    -h --help           print usage message
       --[no-]plain     preserve (or not) bold, underline, etc
    -d --debug          output debugging messages to stderr
USAGE
}

if ($OPT{plain} || (! -t STDOUT && ! defined $OPT{plain})) {
    %C = %PLAIN;
}

if ($OPT{debug}) {
    $| = 1;
}

if (@ARGV < 1) {
    print STDERR "$0: no file specified\n";
    exit(1);
}
elsif (@ARGV > 1) {
    print STDERR "$0: only one file may be specified\n";
    exit(1);
}

my $CONTENT = undef;

# File is small by modern standards, so just read it all into memory.
open(FILE, '<', $ARGV[0])                       or die "$0: unable to open -- $!\n";
my $n = sysread(FILE, $CONTENT, $MAX_FILE_SIZE) or die "$0: unable to read -- $!\n";
close(FILE)                                     or die "$0: unable to close -- $1\n";

# Files all seem to begin with a 0x100-byte identical header. Only 1 of the 26 files
# differs, and only by one byte.
my $header = substr($CONTENT, 0, 0x100, '');
if ($header !~ /^\x80\x19(?:.)\x00\x01\x00\x19\x01\x86\x19\x0a\x01\x14\x14/) {
    print STDERR "$0: does not appear to be an multiscribe file\n";
    exit(1)
}

# Header is followed by 0x27 bytes which I believe set up margins and tab stops.
# Ignoring these for now.
substr($CONTENT, 0, 0x27, '');

# With all that removed, all that should be left is the actual body of the document.
my @last_byte = ( 0, 0, 0 );
while (length($CONTENT) > 0) {
    # text is preceded by formatting code; no idea what the first byte means
    $CONTENT =~ s/^([\x01\x02](.)(.)(.)\x01)//s;

    # the middle three bytes specify the font, size, and style
    # for the text that follows
    my $formatting  = $1;
    my $font        = $2;
    my $size        = $3;
    my $style       = $4;

    # extract text up until the next formatting code
    my $text_end = index($CONTENT, "\x01");
    my $text = substr($CONTENT, 0, ($text_end > 0 ? $text_end : length $CONTENT), '');

    # convert carriage returns and tabs
    $text =~ s/\r/\n\n/g;
    $text =~ s/\t/        /g;

    # these seem to be byte pairs or 16-bit values; no clue what they do
    do { } while ($text =~ s/\x00.//g);

    # again, no idea what these do here
    do { } while ($text =~ s/[\x00-\x08\x0e-\x1f]//g);

    # try to do something sensible with the formatting command
    # if debugging is enabled, output the codes that are changing
    # to try to help figure our what they may be doing
    if ($formatting) {
        my $lead = "";
        my $byte = 0;

        $byte = ord $font;
        if ($byte > 0) {
            # this is a font selection
            # can't reproduce it here, so just change text color
            # there's not enough distinct colors to represent each font
            $text = "$C{color_on}$text$C{color_off}";
        }
        if ($OPT{debug}) {
            $lead .= $byte == 0  || $byte == $last_byte[0]
                        ? "." : sprintf("\\x%02X", $byte);
            $last_byte[0] = $byte;
        }


        $byte = ord $size;
        # 0x01 = tall text
        if ($byte == 0x02) {
            # this is wide text
            $text =~ s/(.)/ $1 /g
        }
        if ($OPT{debug}) {
            $lead .= $byte == 0 || $byte == $last_byte[1]
                        ? "." : sprintf("\\x%02X", $byte);
            $last_byte[1] = $byte;
        }

        $byte = ord $style;
        if ($byte & 0x01) {
            # this is bold text
            $text = "$C{bold_on}$text$C{bold_off}";
        }
        if ($byte & 0x02) {
            # this is italic text
            $text = "$C{italic_on}$text$C{italic_off}";
        }
        if ($byte & 0x04) {
            # this is underline text
            $text = "$C{under_on}$text$C{under_off}";
        }
        if ($byte & 0x08) {
            # this is drop-shadow text
            # can't reproduce here, so just make it faint
            $text = "$C{faint_on}$text$C{faint_off}";
        }
        if ($byte & 0x10) {
            # this is outline text
            # can't reproduce here, so just make it bold
            $text = "$C{bold_on}$text$C{bold_off}";
        }
        # 0x20 = subscript
        # 0x40 = superscript
        if ($byte & 0x80) {
            # this is inverse text
            $text = "$C{inverse_on}$text$C{inverse_off}";
        }
        if ($OPT{debug}) {
            $lead .= $byte == 0 || $byte == $last_byte[2]
                        ? "." : sprintf("\\x%02X", $byte);
            $last_byte[2] = $byte;
        }

        if ($OPT{debug}) {
            $lead = "" if ($lead eq '...');
            print "$C{faint_on}\[$lead\]$C{faint_off}";
        }
    }

    print $text;
}

print "\n";

exit 0;

# highlight non-printing characters (i.e ASCII 0-31)
sub hilite_invisible
{
    my $text = substr($_[0], 0, 80);
    $text =~ s/([\x00-\x1f])/sprintf "$C{inverse_on}\\x%02X$C{inverse_off}",ord($1)/eg;
    return $text . (length $_[0] > 80 ? "..." : "");
}

# eof
